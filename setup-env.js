#!/usr/bin/env node

/**
 * Environment Setup Script
 * Creates necessary .env files with default values for development
 * Run: node setup-env.js
 */

import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// Backend .env configuration
const backendEnvContent = `# Backend Environment Variables
# Generated by setup-env.js

# Server Configuration
PORT=5000
NODE_ENV=development

# Database Configuration
MONGODB_URI=mongodb://localhost:27017/farmkart

# JWT Configuration
JWT_SECRET=your_jwt_secret_key_change_in_production_${Date.now()}
JWT_EXPIRES_IN=7d

# Scheduler Configuration
ENABLE_SCHEDULER=true

# Email Configuration (Optional - for notifications)
# EMAIL_HOST=smtp.gmail.com
# EMAIL_PORT=587
# EMAIL_USER=your_email@gmail.com
# EMAIL_PASSWORD=your_app_password

# Payment Gateway (Optional - for production)
# RAZORPAY_KEY_ID=your_razorpay_key
# RAZORPAY_SECRET=your_razorpay_secret

# AWS S3 (Optional - for file uploads)
# AWS_ACCESS_KEY_ID=your_access_key
# AWS_SECRET_ACCESS_KEY=your_secret_key
# AWS_REGION=ap-south-1
# AWS_S3_BUCKET=farmkart-uploads
`;

// Frontend .env configuration
const frontendEnvContent = `# Frontend Environment Variables
# Generated by setup-env.js

# API Configuration
VITE_API_URL=http://localhost:5000/api
VITE_API_BASE_URL=http://localhost:5000/api

# App Configuration
VITE_APP_NAME=FarmKart
VITE_APP_VERSION=1.0.0

# Feature Flags
VITE_ENABLE_MOCK_DATA=false
VITE_ENABLE_DEBUG=true

# Google Maps (Optional - for location features)
# VITE_GOOGLE_MAPS_API_KEY=your_google_maps_key

# File Upload Configuration
VITE_MAX_FILE_SIZE=5242880
VITE_ALLOWED_FILE_TYPES=image/jpeg,image/png,image/webp
`;

// Function to create .env file
function createEnvFile(filePath, content, name) {
  try {
    // Check if file already exists
    if (fs.existsSync(filePath)) {
      console.log(`‚ö†Ô∏è  ${name} already exists. Skipping...`);
      
      // Create backup
      const backupPath = `${filePath}.backup.${Date.now()}`;
      fs.copyFileSync(filePath, backupPath);
      console.log(`   üìã Backup created: ${path.basename(backupPath)}`);
      
      return false;
    }
    
    // Create the file
    fs.writeFileSync(filePath, content, 'utf8');
    console.log(`‚úÖ Created ${name}`);
    return true;
  } catch (error) {
    console.error(`‚ùå Error creating ${name}:`, error.message);
    return false;
  }
}

// Function to ensure directory exists
function ensureDirectoryExists(dirPath) {
  if (!fs.existsSync(dirPath)) {
    fs.mkdirSync(dirPath, { recursive: true });
  }
}

// Main setup function
async function setupEnvironment() {
  console.log('üöÄ FarmKart Environment Setup\n');
  console.log('================================\n');
  
  // Setup backend .env
  const backendEnvPath = path.join(__dirname, 'backend', '.env');
  const backendDir = path.join(__dirname, 'backend');
  
  ensureDirectoryExists(backendDir);
  const backendCreated = createEnvFile(backendEnvPath, backendEnvContent, 'backend/.env');
  
  // Setup frontend .env
  const frontendEnvPath = path.join(__dirname, 'FrontEnd', '.env');
  const frontendDir = path.join(__dirname, 'FrontEnd');
  
  ensureDirectoryExists(frontendDir);
  const frontendCreated = createEnvFile(frontendEnvPath, frontendEnvContent, 'FrontEnd/.env');
  
  // Create .env.example files for reference
  const backendExamplePath = path.join(__dirname, 'backend', '.env.example');
  const frontendExamplePath = path.join(__dirname, 'FrontEnd', '.env.example');
  
  fs.writeFileSync(backendExamplePath, backendEnvContent.replace(/=.*/gm, '='), 'utf8');
  fs.writeFileSync(frontendExamplePath, frontendEnvContent.replace(/=.*/gm, '='), 'utf8');
  
  console.log('\n================================\n');
  
  if (backendCreated || frontendCreated) {
    console.log('‚ú® Environment setup completed!\n');
    console.log('üìù Next steps:');
    console.log('   1. Review and update the .env files with your specific values');
    console.log('   2. Make sure MongoDB is running');
    console.log('   3. Run "npm install" in both backend and FrontEnd directories');
    console.log('   4. Run "npm run seed" in backend directory to seed the database');
    console.log('   5. Start the backend: cd backend && npm run dev');
    console.log('   6. Start the frontend: cd FrontEnd && npm run dev\n');
  } else {
    console.log('‚ÑπÔ∏è  Environment files already exist.\n');
    console.log('   To regenerate, delete the existing .env files and run this script again.');
  }
  
  // Additional setup checks
  console.log('\nüîç System Checks:\n');
  
  // Check if MongoDB is installed
  try {
    const childProcess = await import('child_process');
    const { execSync } = childProcess;
    try {
      execSync('mongod --version', { stdio: 'ignore' });
      console.log('‚úÖ MongoDB is installed');
    } catch {
      console.log('‚ö†Ô∏è  MongoDB not found. Please install MongoDB from https://www.mongodb.com/');
    }
  } catch {
    console.log('‚ö†Ô∏è  Could not check MongoDB installation');
  }
  
  // Check if Node version is compatible
  const nodeVersion = process.version;
  const majorVersion = parseInt(nodeVersion.split('.')[0].substring(1));
  if (majorVersion >= 18) {
    console.log(`‚úÖ Node.js version ${nodeVersion} is compatible`);
  } else {
    console.log(`‚ö†Ô∏è  Node.js version ${nodeVersion} detected. Version 18+ recommended`);
  }
  
  console.log('\n================================\n');
  console.log('üìö Documentation:');
  console.log('   - README.md: Project overview and quick start');
  console.log('   - SETUP_GUIDE.md: Detailed setup instructions');
  console.log('   - PROJECT_STATUS.md: Current implementation status');
  console.log('   - backend/README.md: Backend API documentation\n');
}

// Run setup
setupEnvironment();
